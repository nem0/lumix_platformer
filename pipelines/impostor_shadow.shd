include "pipelines/common.glsl"

compute_shader [[
	layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
	layout (rgba8, binding = 0) uniform writeonly image2D u_output;
	layout (binding = 1) uniform sampler2D u_normalmap;
	layout (binding = 2) uniform sampler2D u_depth;
	layout(std140, binding = 4) uniform Data {
		mat4 u_projection;
		mat4 u_proj_to_model;
		mat4 u_inv_view;
		vec4 u_center;
		ivec2 u_tile;
		ivec2 u_tile_size;
		int u_size;
		float u_radius;
	};

	vec3 impostorToWorld(vec2 uv) {
		uv = uv * 2 - 1;
		vec3 position= vec3(
			uv.x + uv.y,
			0,
			uv.x - uv.y
		) * 0.5;

		position.y = -(1.0 - abs(position.x) - abs(position.z));
		return position;
	}

	vec2 worldToImpostor(vec3 vec)
	{
		vec.y = min(vec.y, 0);
		vec = normalize(vec);
		vec.xz /= dot(vec3(1.0), abs(vec));
		return vec2(vec.x + vec.z, vec.x - vec.z) * 0.5 + 0.5;
	}

	mat4 lookAt(vec3 eye, vec3 at, vec3 up)
	{
		mat4 res = mat4(1);
		vec3 f = normalize(eye - at);
		vec3 r = normalize(cross(up, f));
		vec3 u = normalize(cross(f, r));
		
		res[0].xyz = r;
		res[1].xyz = u;
		res[2].xyz = f;
		res = transpose(res);
		
		res[3].xyz = vec3(-dot(r, eye), -dot(u, eye), -dot(f, eye));
		return res;
	}

	vec2 dxuv(vec2 uv) {
		#ifdef ORIGIN_BOTTOM_LEFT
			return uv;
		#else
			return vec2(uv.x, 1 - uv.y);
		#endif
	}

	float getShadow(vec2 tile_uv, float depth, vec3 v_shadow) {
		v_shadow = normalize(v_shadow);
		if (depth == 0) return 1;

		ivec2 shadow_tile = ivec2(0.5 + worldToImpostor(v_shadow) * (u_size - 1));
		v_shadow = normalize(impostorToWorld(shadow_tile / float(u_size - 1)));

		mat4 view = lookAt(u_center.xyz - v_shadow * u_radius, u_center.xyz, vec3(0, 1, 0));
		
		mat4 to_sm = u_projection * view * u_proj_to_model;

		float res = 0;
		vec4 p = to_sm * vec4(tile_uv * 2 - 1, depth, 1);
		p.xyz /= p.w;
		p.xy = p.xy * 0.5 + 0.5;
		float shadow_depth = texture(u_depth, dxuv((p.xy + shadow_tile.xy) / float(u_size))).r;
		res += shadow_depth * 0.99 < p.z ? 1 : 0;

		return res;
	}

	float softShadow(vec2 tile_uv, vec3 N, float depth, vec3 mid, vec3 delta) {
		float NdL = saturate(0.1 + 
			0.5 * saturate(dot(N, -mid)) 
			+ 0.25 * saturate(dot(N, -mid - delta)) 
			+ 0.25 * saturate(dot(N, -mid + delta))
		);
		NdL *= NdL;
		float s = 0.5 * getShadow(tile_uv, depth, mid)
			+ 0.25 * getShadow(tile_uv, depth, mid + delta)
			+ 0.25 * getShadow(tile_uv, depth, mid - delta);
		#ifdef BAKE_NORMALS
			return saturate(min(s, NdL));
		#else
			return saturate(s);
		#endif
	}

	void main() {
		if (any(greaterThan(gl_GlobalInvocationID.xy, u_tile_size))) return;

		vec2 tile_uv = gl_GlobalInvocationID.xy / vec2(u_tile_size);
		vec2 uv = (u_tile + tile_uv) / float(u_size);

		float depth = texture(u_depth, dxuv(uv)).r;
		vec3 N;
		N.xy = texture(u_normalmap, uv).xy * 2 - 1;
		N.z = sqrt(1 - dot(N.xy, N.xy));
		N = mat3(u_inv_view) * N;

		float zenith = -1;
		vec4 res = vec4(
			softShadow(tile_uv, N, depth, vec3(1, zenith, 0), vec3(0, 0, 0.5)),
			softShadow(tile_uv, N, depth, vec3(0, zenith, -1), vec3(0.5, 0, 0)),
			softShadow(tile_uv, N, depth, vec3(-1, zenith, 0), vec3(0, 0, 0.5)),
			softShadow(tile_uv, N, depth, vec3(0, zenith, 1), vec3(0.5, 0, 0))
		);

		ivec2 uv_out = ivec2(gl_GlobalInvocationID.xy + u_tile * u_tile_size);
		#ifndef ORIGIN_BOTTOM_LEFT
			uv_out.y = u_tile_size.y * u_size - uv_out.y - 1;
		#endif

		imageStore(u_output, uv_out, res);
	}
]]