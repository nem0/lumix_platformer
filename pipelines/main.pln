local lighting_shader = preloadShader("pipelines/lighting.shd")
local textured_quad_shader = preloadShader("pipelines/textured_quad.shd")
local debug_clusters_shader = preloadShader("pipelines/debug_clusters.shd")
local tonemap_shader = preloadShader("pipelines/tonemap.shd")
local selection_outline_shader = preloadShader("pipelines/selection_outline.shd")
local blur_shader = preloadShader("pipelines/blur.shd")
local taa_shader = preloadShader("pipelines/taa.shd")
local debug_shadowmap = false
local debug_normal = false
local debug_roughness = false
local debug_metallic = false
local debug_ao = false
local debug_shadow_buf = false
local debug_albedo = false
local debug_clusters = false
local debug_shadow_atlas = false
local enable_icons = true
local taa_enabled = true
local taa_history = -1
local render_grass = true
local render_impostors = true
local render_terrain = true

function iff(cond, a, b) 
	if cond then return a else return b end
end

local shadowmap_1x1 = createRenderbufferDesc { size = {1, 1}, format = "depth32", debug_name = "shadowmap" }
local shadowmap_desc = createRenderbufferDesc { size = { 4096, 1024 }, format = "depth32", debug_name = "shadowmap" }
local selection_mask_desc = createRenderbufferDesc { format = "depth32", debug_name = "selection_depthbuffer" }
local gbuffer0_desc = createRenderbufferDesc { format = "srgba", debug_name = "gbuffer0" }
local gbuffer1_desc = createRenderbufferDesc { compute_write = true, format = "rgba16", debug_name = "gbuffer1" }
local gbuffer2_desc = createRenderbufferDesc { compute_write = true, format = "rgba8", debug_name = "gbuffer2" }
local dsbuffer_desc = createRenderbufferDesc { format = "depth24stencil8", debug_name = "gbuffer_ds" }
local baked_shadowmap_desc = createRenderbufferDesc { format = "depth32", debug_name = "shadowmap_depth" }
local taa_history_desc = createRenderbufferDesc { format = "rgba16", debug_name = "taa", compute_write = true }
local taa_desc = createRenderbufferDesc { format = "rgba16", debug_name = "taa_tmp", compute_write = true }
local icon_ds_desc = createRenderbufferDesc { format = "depth24stencil8", debug_name = "icon_ds" }
local water_color_copy_desc = createRenderbufferDesc { format = "r11g11b10f", debug_name = "hdr_copy" }
local hdr_rb_desc = createRenderbufferDesc { format = iff(PROBE ~= nil, "rgba32f", "rgba16f"), debug_name = "hdr" }
local tonemap_rb_desc = createRenderbufferDesc { format = iff(PREVIEW ~= nil, "rgba8", "srgba"), debug_name = "tonemap" }
local preview_rb_desc = createRenderbufferDesc { format = "rgba16f", debug_name = "preview_rb" }
local preview_ds_desc = createRenderbufferDesc { format = "depth32", debug_name = "gbuffer_ds" }

local empty_state = createRenderState {}
local no_depth_state = createRenderState { depth_write = false, depth_test = false}

local decal_state = createRenderState {
	blending = "alpha",
	depth_write = false
}

local light_pass_state = createRenderState { 
	depth_test = false,
	blending = "add",
	stencil_write_mask = 0,
	stencil_func = STENCIL_NOT_EQUAL,
	stencil_ref = 0,
	stencil_mask = 0xff,
	stencil_sfail = STENCIL_KEEP,
	stencil_zfail = STENCIL_KEEP,
	stencil_zpass = STENCIL_KEEP,
}

local terrain_decal_state = createRenderState {
	blending = "alpha",
	depth_write = false,
	stencil_write_mask = 0,
	stencil_func = STENCIL_EQUAL,
	stencil_ref = 2,
	stencil_mask = 0xff,
	stencil_sfail = STENCIL_KEEP,
	stencil_zfail = STENCIL_KEEP,
	stencil_zpass = STENCIL_KEEP,
}

local transparent_state = createRenderState {
	blending = "alpha",
	depth_write = false
}

local water_state = createRenderState {
	depth_write = false,
}

local default_state = createRenderState {
	depth_write = true,
	stencil_func = STENCIL_ALWAYS,
	stencil_write_mask = 0xff,
	stencil_ref = 1,
	stencil_mask = 0xff, 
	stencil_sfail = STENCIL_KEEP,
	stencil_zfail = STENCIL_KEEP,
	stencil_zpass = STENCIL_REPLACE,
}

local terrain_state = createRenderState {
	depth_func = DEPTH_FN_EQUAL,
	depth_write = false,
	stencil_func = STENCIL_ALWAYS,
	stencil_write_mask = 0xff,
	stencil_ref = 2,
	stencil_mask = 0xff, 
	stencil_sfail = STENCIL_KEEP,
	stencil_zfail = STENCIL_KEEP,
	stencil_zpass = STENCIL_REPLACE,
}

local grass_state = createRenderState {
	define = "GRASS",
	depth_write = true,
	stencil_func = STENCIL_ALWAYS,
	stencil_write_mask = 0xff,
	stencil_ref = 1,
	stencil_mask = 0xff, 
	stencil_sfail = STENCIL_KEEP,
	stencil_zfail = STENCIL_KEEP,
	stencil_zpass = STENCIL_REPLACE,
}

local shadow_grass_state = createRenderState {
	defines = { "GRASS", "DEPTH" },
	depth_write = true,
	stencil_func = STENCIL_ALWAYS,
	stencil_write_mask = 0xff,
	stencil_ref = 1,
	stencil_mask = 0xff, 
	stencil_sfail = STENCIL_KEEP,
	stencil_zfail = STENCIL_KEEP,
	stencil_zpass = STENCIL_REPLACE,
}

function waterPass(view_params, entities, colorbuffer, dsbuffer, shadowmap)

	local color_copy = createRenderbuffer(water_color_copy_desc)

	setRenderTargets(color_copy)

	drawcallUniforms( 
		0, 0, 1, 1, 
		1, 0, 0, 0, 
		0, 1, 0, 0, 
		0, 0, 1, 0, 
		0, 0, 0, 1, 
		0, 0, 0, 1
	)
	-- TODO textures instead of drawcall
	drawArray(0, 3, textured_quad_shader
		, { colorbuffer }
		, empty_state
	)

	setRenderTargetsReadonlyDS(colorbuffer, dsbuffer)
	beginBlock("water_pass")
	pass(view_params)
	bindTextures({ dsbuffer, shadowmap, SHADOW_ATLAS, REFLECTION_PROBES, color_copy }, 5);
	renderBucket(entities.water)
	endBlock()
end

function transparentPass(view_params, entities, colorbuffer, dsbuffer, shadowmap)
	setRenderTargetsReadonlyDS(colorbuffer, dsbuffer)

	beginBlock("transparent_pass")
	pass(view_params)
	bindTextures({ shadowmap, SHADOW_ATLAS, REFLECTION_PROBES, dsbuffer }, 5);
	renderBucket(entities.transparent)
	renderTransparent()
	endBlock()
end

function geomPass(view_params, entities)
	beginBlock("geom_pass")
		local gbuffer0 = createRenderbuffer(gbuffer0_desc)
		local gbuffer1 = createRenderbuffer(gbuffer1_desc)
		local gbuffer2 = createRenderbuffer(gbuffer2_desc)
		local dsbuffer = createRenderbuffer(dsbuffer_desc)
	
		setRenderTargetsDS(gbuffer0, gbuffer1, gbuffer2, dsbuffer)
		clear(CLEAR_ALL, 0.0, 0.0, 0.0, 1, 0)
		pass(view_params)
		if render_terrain then
			renderTerrains(view_params, empty_state, "DEPTH")
		end
		if render_grass then
			renderGrass(view_params, grass_state)
		end
		renderBucket(entities.default)
		renderOpaque()
		if render_impostors then
			beginBlock("impostors")
			renderBucket(entities.impostor)
			endBlock()
		end
		if render_terrain then
			renderTerrains(view_params, terrain_state, "DEFERRED")
		end
	endBlock()

	beginBlock("decals")
		setRenderTargetsReadonlyDS(gbuffer0, gbuffer1, gbuffer2, dsbuffer)
		bindTextures({
			dsbuffer,
		}, 1)
		renderBucket(entities.decal)
		renderBucket(entities.terrain_decal)
	endBlock()
	
	return gbuffer0, gbuffer1, gbuffer2, dsbuffer
end

function lightPass(view_params, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
	local hdr_rb = createRenderbuffer(hdr_rb_desc)
	setRenderTargets(hdr_rb)
	clear(CLEAR_COLOR, 0, 0, 0, 0, 0)
	
	setRenderTargetsReadonlyDS(hdr_rb, gbuffer_depth)

	beginBlock("lighting")
	drawArray(0, 3, lighting_shader,
		{
			gbuffer0,
			gbuffer1,
			gbuffer2,
			gbuffer_depth,
			shadowmap,
			SHADOW_ATLAS,
			REFLECTION_PROBES
		}, 
		light_pass_state
	)
	endBlock()
	
	return hdr_rb
end

function debugClusters(gb_depth, output)
	setRenderTargets(output)
	drawArray(0, 3, debug_clusters_shader
		, { gb_depth }
		, { depth_test = false });
end


function debugRenderbuffer(rb, output, r_mask, g_mask, b_mask, a_mask, offsets)
	setRenderTargets(output)

	drawcallUniforms( 
		0, 0, 1, 1, 
		r_mask[1], r_mask[2], r_mask[3], r_mask[4], 
		g_mask[1], g_mask[2], g_mask[3], g_mask[4], 
		b_mask[1], b_mask[2], b_mask[3], b_mask[4], 
		a_mask[1], a_mask[2], a_mask[3], a_mask[4], 
		offsets[1], offsets[2], offsets[3], offsets[4]
	)
	drawArray(0, 3, textured_quad_shader
		, { rb }
		, empty_state
	)
end

function blur(buffer, w, h, rb_desc) 
	beginBlock("blur")
	local blur_buf = createRenderbuffer(rb_desc)
	setRenderTargets(blur_buf)
	viewport(0, 0, w, h)
	drawcallUniforms(1.0 / w, 1.0 / h, 0, 0)
	drawArray(0, 3, blur_shader
		, { buffer }
		, empty_state
		, "BLUR_H"
	)
	setRenderTargets(buffer)
	viewport(0, 0, w, h)
	drawArray(0, 3, blur_shader
		, { blur_buf }
		, empty_state
	)
	endBlock()
	setRenderTargets()
end

function shadowPass()
	if not environmentCastShadows() then
		local rb = createRenderbuffer(shadowmap_1x1)
		setRenderTargetsDS(rb)
		clear(CLEAR_ALL, 0, 0, 0, 1, 0)
		return rb
	else 
		beginBlock("shadows")
			local depthbuf = createRenderbuffer(shadowmap_desc)
			setRenderTargetsDS(depthbuf)
			clear(CLEAR_ALL, 0, 0, 0, 1, 0)
			
			for slice = 0, 3 do 
				local view_params = getShadowCameraParams(slice)
				
				viewport(slice * 1024, 0, 1024, 1024)
				beginBlock("slice " .. tostring(slice + 1))
				pass(view_params)

				local entities = cull(view_params
					, { layer = "default", define = "DEPTH" }
					, { layer = "impostor", define = "DEPTH" })
				renderBucket(entities.default)
				if render_impostors then
					renderBucket(entities.impostor)
				end

				if slice < 1 and render_grass then
					renderGrass(view_params, shadow_grass_state)
				end
				if render_terrain then
					renderTerrains(view_params, empty_state, "DEPTH")
				end
				endBlock()
			end
		endBlock()
		
		return depthbuf
	end
end

function postprocess(phase, hdr_buffer, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
	local prev = hdr_buffer
	if _G["postprocesses"] ~= nil then
		for _, value in pairs(_G["postprocesses"]) do
			prev = value(getfenv(1), phase, prev, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
		end
	end
	return prev
end

function tonemap(hdr_buffer)
	if PROBE ~= nil then
		return hdr_buffer
	end

	beginBlock("tonemap")
	local rb = createRenderbuffer(tonemap_rb_desc)
	setRenderTargets(rb)
	drawArray(0, 3, tonemap_shader
		, { hdr_buffer }
		, empty_state
	)
	endBlock()
	return rb
end

function debugPass(output, gb0, gb1, gb2, gb_depth, shadowmap)
	if debug_shadowmap then
		debugRenderbuffer(shadowmap, output, {1, 0, 0, 0}, {1, 0, 0, 0}, {1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 1})
	end
	if debug_normal then
		debugRenderbuffer(gb1, output, {1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 0}, {0, 0, 0, 1})
	end
	if debug_albedo then
		debugRenderbuffer(gb0, output, {1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 0}, {0, 0, 0, 1})
	end
	if debug_roughness then
		debugRenderbuffer(gb0, output, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0}, {0, 0, 0, 1})
	end
	if debug_metallic then
		debugRenderbuffer(gb2, output, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 0, 0}, {0, 0, 0, 1})
	end
	if debug_ao then
		debugRenderbuffer(gb1, output, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0}, {0, 0, 0, 1})
	end
	if debug_shadow_buf then
		debugRenderbuffer(gb2, output, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0}, {0, 0, 0, 1})
	end
	if debug_shadow_atlas then
		debugRenderbuffer(SHADOW_ATLAS, output, {1, 0, 0, 0}, {1, 0, 0, 0}, {1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 1})
	end
	if debug_clusters then
		debugClusters(gb_depth, output)
	end
end


function renderSelectionOutline(output)
	local selection_mask = createRenderbuffer(selection_mask_desc)
	setRenderTargetsDS(selection_mask)
	clear(CLEAR_DEPTH, 0, 0, 0, 0, 0)
	renderSelection()
	
	setRenderTargets(output)
	drawArray(0, 3, selection_outline_shader
		, { selection_mask }
		, no_depth_state
	)
end

function main_shadowmap()
	beginBlock("bake_shadow")

	local depthbuf = createRenderbuffer(baked_shadowmap_desc)
	setRenderTargetsDS(depthbuf)
	clear(CLEAR_ALL, 0, 0, 0, 1, 0)
	local view_params = getCameraParams()
	
	pass(view_params)

	local entities = cull(view_params, {layer="default", define="DEPTH"})
	renderBucket(entities.default)
	renderTerrains(view_params, empty_state, "DEPTH")
	setOutput(depthbuf)

	endBlock()
end

function render_preview()
	local shadowmap = createRenderbuffer(shadowmap_1x1)
	setRenderTargetsDS(shadowmap)
	clear(CLEAR_ALL, 0, 0, 0, 1, 0)

	local view_params = getCameraParams()
	local entities = cull(view_params
		, { layer = "default", state = default_state }
		, { layer = "transparent", sort = "depth", state = transparent_state })
	
	local rb = createRenderbuffer(preview_rb_desc)
	local dsbuffer = createRenderbuffer(preview_ds_desc)
	
	setRenderTargetsDS(rb, dsbuffer)
	clear(CLEAR_ALL, 0.9, 0.9, 0.9, 1, 0)

	pass(view_params)
	
	bindTextures({ shadowmap, SHADOW_ATLAS, REFLECTION_PROBES }, 5)
	renderBucket(entities.default)
	renderBucket(entities.transparent)

	local output = tonemap(rb)
	setOutput(output)
end

function TAA(res, gbuffer_depth)
	PIXEL_JITTER = taa_enabled
	if taa_enabled then
		beginBlock("taa")
		if taa_history == -1 then
			taa_history = createRenderbuffer(taa_history_desc)
			setRenderTargets(taa_history)
			clear(CLEAR_ALL, 1, 1, 1, 1, 0)
		end

		local taa_tmp = createRenderbuffer(taa_desc)

		setRenderTargets()

		drawcallUniforms(viewport_w, viewport_h, 0, 0) 
		bindTextures({taa_history, gbuffer_depth, res}, 0)
		bindImageTexture(taa_tmp, 3)
		dispatch(taa_shader, (viewport_w + 15) / 16, (viewport_h + 15) / 16, 1)

		setRenderTargets(res)
		drawcallUniforms( 
			0, 0, 1, 1, 
			1, 0, 0, 0, 
			0, 1, 0, 0, 
			0, 0, 1, 0, 
			0, 0, 0, 1, 
			0, 0, 0, 0
		)

		-- TODO get rid of this step
		drawArray(0, 3, textured_quad_shader
			, { taa_tmp }
			, empty_state)

		taa_history = taa_tmp

		keepRenderbufferAlive(taa_history)
		endBlock()
	end
end

function main()
	if PREVIEW then
		render_preview()
		return
	end

	local view_params = getCameraParams()
	local entities = cull(view_params
		, { layer = "default", define = "DEFERRED", state = default_state }
		, { layer = "transparent", sort = "depth", state = transparent_state }
		, { layer = "water", sort = "depth", state = water_state }
		, { layer = "impostor", define = "DEFERRED", state = default_state }
		, { layer = "decal", state = decal_state }
		, { layer = "terrain_decal", state = terrain_decal_state }
	)

	local shadowmap = shadowPass()
	local gbuffer0, gbuffer1, gbuffer2, gbuffer_depth = geomPass(view_params, entities)

	postprocess("pre_lightpass", nil, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)

	local hdr_buffer = lightPass(view_params, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
	
	custom_tonemap = false
	local res = hdr_buffer
	res = postprocess("pre", hdr_buffer, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
	
	waterPass(view_params, entities, res, gbuffer_depth, shadowmap)
	transparentPass(view_params, entities, res, gbuffer_depth, shadowmap)
	setRenderTargetsReadonlyDS(hdr_buffer, gbuffer_depth)

	res = postprocess("post", res, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)

	if PROBE == nil then
		if custom_tonemap == true then
			res = postprocess("tonemap", res, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
		else
			res = tonemap(res)
		end
	end

	if PROBE == nil then
		res = postprocess("post_tonemap", res, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
	end


	if GAME_VIEW or APP then
		setRenderTargetsReadonlyDS(res, gbuffer_depth)
		renderUI()
		if renderIngameGUI ~= nil then
			renderIngameGUI()
		end
	end

	debugPass(res, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
	local icon_ds = -1
	if SCENE_VIEW ~= nil then
		icon_ds = createRenderbuffer(icon_ds_desc)
		pass(view_params)
			setRenderTargetsDS(res, icon_ds)
			clear(CLEAR_DEPTH, 0, 0, 0, 1, 0)
			renderGizmos()
	end

	if SCENE_VIEW ~= nil then
		renderDebugShapes()
		renderSelectionOutline(res)
		if enable_icons then 
			setRenderTargetsDS(res, icon_ds)
			bindTextures({
				gbuffer_depth,
			}, 1)
			renderIcons()
		end
	end

	TAA(res, gbuffer_depth)

	render2D()

	if APP ~= nil then
		setRenderTargets()
		drawcallUniforms( 
			0, 0, 1, 1, 
			1, 0, 0, 0, 
			0, 1, 0, 0, 
			0, 0, 1, 0, 
			0, 0, 0, 1, 
			0, 0, 0, 0
		)

		drawArray(0, 3, textured_quad_shader
			, { res }
			, { depth_test = false })
	end
	setOutput(res)
end

function onGUI()
	if GAME_VIEW then
		return
	end

	if ImGui.Button("Debug") then
		ImGui.OpenPopup("debug_popup")
	end

	if ImGui.BeginPopup("debug_popup") then
		changed, debug_shadowmap = ImGui.Checkbox("Shadowmap", debug_shadowmap)
		changed, debug_shadow_atlas = ImGui.Checkbox("Shadow atlas", debug_shadow_atlas)
		changed, debug_albedo = ImGui.Checkbox("Albedo", debug_albedo)
		changed, debug_normal = ImGui.Checkbox("Normal", debug_normal)
		changed, debug_roughness = ImGui.Checkbox("Roughness", debug_roughness)
		changed, debug_metallic = ImGui.Checkbox("Metallic", debug_metallic)
		changed, debug_ao = ImGui.Checkbox("AO", debug_ao)
		changed, debug_shadow_buf = ImGui.Checkbox("GBuffer shadow", debug_shadow_buf)
		changed, debug_clusters = ImGui.Checkbox("Clusters", debug_clusters)
		changed, taa_enabled = ImGui.Checkbox("TAA", taa_enabled)
		changed, render_grass = ImGui.Checkbox("Grass", render_grass)
		changed, render_impostors = ImGui.Checkbox("Impostors", render_impostors)
		changed, render_terrain = ImGui.Checkbox("Terrain", render_terrain)
		changed, enable_icons = ImGui.Checkbox("Icons", enable_icons)
		local lod_mul = Renderer.getLODMultiplier()
		changed, lod_mul = ImGui.DragFloat("LOD multiplier", lod_mul)
		if changed then
			Renderer.setLODMultiplier(lod_mul)
		end
		ImGui.EndPopup()
	end
end
