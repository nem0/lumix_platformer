import "pipelines/procedural_geom.inc"

uniform("Material color", "color", {1, 1, 1, 1})
uniform("Roughness", "float", 1)
uniform("Metallic", "float", 0)
uniform("Emission", "float", 0)
uniform("Translucency", "float", 0)

texture_slot {
	name = "Albedo",
	default_texture = "textures/common/white.tga"
}

texture_slot {
	name = "Normal",
	default_texture = "textures/common/default_normal.tga"
}

texture_slot {
	name = "Roughness",
	default_texture = "textures/common/white.tga"
}

texture_slot {
	name = "Metallic",
	define = "HAS_METALLICMAP"
}

texture_slot {
	name = "Ambient occlusion",
	define = "HAS_AMBIENT_OCCLUSION_TEX"
}

common([[
	layout (binding=0) uniform sampler2D t_albedo;
	layout (binding=1) uniform sampler2D t_normal;
	layout (binding=2) uniform sampler2D t_roughness;
	#ifdef HAS_METALLICMAP
		layout (binding=3) uniform sampler2D t_metallic;
	#endif
	#ifdef HAS_AMBIENT_OCCLUSION_TEX
		layout (binding=4) uniform sampler2D t_ambient_occlusion;
	#endif
]])

procedural_geom_shader {
	user_channels = 3,
	code = [[
		data.albedo = texture(t_albedo, v_uv).rgb * u_material_color.rgb;
		#ifdef _HAS_ATTR4
			data.albedo *= v_user.rgb;
		#endif
		data.alpha = 1;
		data.N = v_normal;
		data.roughness = texture(t_roughness, v_uv).r * u_roughness;
		#ifdef HAS_METALLICMAP
			data.metallic = texture(t_metallic, v_uv).r * u_metallic;
		#else
			data.metallic = 0;
		#endif
		#ifdef HAS_AMBIENT_OCCLUSION_TEX
			data.ao = texture(t_ambient_occlusion, v_uv).r;
		#else
			data.ao = 1;
		#endif
		data.shadow = 1;
		data.translucency = u_translucency;
		data.emission = 0;
	]]
}