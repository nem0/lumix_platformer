import "pipelines/surface_base.inc"

uniform("Material color", "color", {1, 1, 1, 1})
uniform("Roughness", "float", 1)
uniform("Metallic", "float", 0)
uniform("Emission", "float", 0)
uniform("Translucency", "float", 0)

surface_shader [[
	vec4 c = texture(t_albedo, v_uv, -1) * u_material_color;
	data.albedo = c.rgb;
	data.alpha = c.a;
	#ifdef _HAS_ATTR6
		data.albedo.rgb *= v_color.rgb;
	#endif

	#ifdef _HAS_ATTR7
		data.ao = v_ao;
	#else
		data.ao = 1;
	#endif

	#ifdef HAS_AMBIENT_OCCLUSION_TEX
		data.ao *= texture(u_ambient_occlusion, v_uv).r;
	#endif

	#ifdef FUR 
		data.alpha = saturate(data.alpha - v_fur_layer);
	#endif

	// dx shader has internal errors on this
	#if defined ALPHA_CUTOUT && !defined LUMIX_DX_SHADER 
		if(data.alpha < 0.5) discard;
	#endif

	vec3 N = v_normal;
	vec3 tangent = v_tangent;

	mat3 tbn = mat3(
		normalize(tangent),
		normalize(N),
		normalize(cross(tangent, N))
	);
		
	data.roughness = texture(t_roughness, v_uv).g * u_roughness;
	#ifdef HAS_METALLICMAP
		data.metallic = texture(t_metallic, v_uv).b * u_metallic;
	#else
		data.metallic = u_metallic;
	#endif
	data.N.xz = texture(t_normal, v_uv).xy * 2 - 1;
	data.N.y = sqrt(saturate(1 - dot(data.N.xz, data.N.xz))); 
	data.N = tbn * data.N;
	data.emission = u_emission;
	data.translucency = u_translucency;
	data.shadow = 1;

	#ifndef ALPHA_CUTOUT
		float ndotv = abs(dot(data.N , data.V)) + 1e-5f;
		data.alpha = mix(data.alpha, 1, pow(saturate(1 - ndotv), 5));
	#endif
]]