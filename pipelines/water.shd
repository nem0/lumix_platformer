texture_slot {
	name = "Normal",
	default_texture = "textures/common/default_normal.tga"
}

texture_slot {
	name = "Noise",
	default_texture = "textures/common/white.tga"
}

texture_slot {
	name = "Foam",
	define = "HAS_FOAM"
}

texture_slot {
	name = "Clutter",
	define = "HAS_CLUTTER"
}

include "pipelines/common.glsl"

uniform("UV scale", "float")
uniform("Specular power", "float")
uniform("R0", "float")
uniform("Normal strength", "float")
uniform("Reflection multiplier", "float")
uniform("Specular multiplier", "float")
uniform("Flow dir", "vec2")
uniform("Water color", "color")
uniform("Ground tint", "color")
uniform("Water scattering", "float")
uniform("Refraction distortion", "float")

define "SSR"

------------------

vertex_shader [[
	layout(location = 0) in vec3 a_position;
	#ifdef _HAS_ATTR1 
		layout(location = 1) in vec2 a_uv;
	#else
		const vec2 a_uv = vec2(0, 0);
	#endif
	#ifdef _HAS_ATTR2 
		layout(location = 2) in vec2 a_masks;
	#endif
	const vec3 a_normal = vec3(0, 1, 0);
	const vec3 a_tangent = vec3(1, 0, 0);

	#if defined AUTOINSTANCED
		layout(location = 4) in vec4 i_rot;
		layout(location = 5) in vec4 i_pos_lod;
		layout(location = 6) in vec4 i_scale;
	#else
		layout(std140, binding = 4) uniform Model {
			mat4 u_model;
		};
	#endif
	layout (location = 0) out vec2 v_uv;
	layout (location = 1) out vec3 v_normal;
	layout (location = 2) out vec3 v_tangent;
	layout (location = 3) out vec4 v_wpos;
	#ifdef _HAS_ATTR2 
		layout (location = 4) out vec2 v_masks;
	#endif
	
	void main() {
		v_uv = a_uv;
		#if defined AUTOINSTANCED
			v_normal = rotateByQuat(i_rot, a_normal);
			v_tangent = rotateByQuat(i_rot, a_tangent);
			vec3 p = a_position * i_scale.xyz;
			v_wpos = vec4(i_pos_lod.xyz + rotateByQuat(i_rot, p), 1);
		#else 
			mat4 model_mtx = u_model;
			v_normal = mat3(model_mtx) * a_normal;
			v_tangent = mat3(model_mtx) * a_tangent;

			vec3 p = a_position;

			v_wpos = model_mtx * vec4(p,  1);
		#endif
		
		#ifdef _HAS_ATTR2 
			v_masks = a_masks;
		#endif
		gl_Position = Pass.view_projection * v_wpos;		
	}
]]

---------------------

fragment_shader [[
	layout (binding=0) uniform sampler2D u_normalmap;
	layout (binding=1) uniform sampler2D u_noise;
	#ifdef HAS_FOAM
		layout (binding=2) uniform sampler2D u_foam;
	#endif
	#ifdef HAS_CLUTTER
		layout (binding=3) uniform sampler2D u_clutter;
	#endif

	layout (binding=4) uniform sampler2D u_shadowmap;
	layout (binding=5) uniform sampler2D u_depthbuffer;
	
	layout (binding=8) uniform samplerCubeArray u_reflection_probes;
	layout (binding=9) uniform sampler2D u_bg;
	
	layout (location = 0) in vec2 v_uv;
	layout (location = 1) in vec3 v_normal;
	layout (location = 2) in vec3 v_tangent;
	layout (location = 3) in vec4 v_wpos;
	#ifdef _HAS_ATTR2 
		layout (location = 4) in vec2 v_masks;
	#endif

	layout(location = 0) out vec4 o_color;

	vec2 raycast(vec3 csOrig, vec3 csDir, float stride, float jitter) {
        vec3 csEndPoint = csOrig + abs(csOrig.z * 0.1) * csDir;

        vec4 H0 = Global.projection * vec4(csOrig, 1);
        vec4 H1 = Global.projection * vec4(csEndPoint, 1);

        float k0 = 1 / H0.w, k1 = 1 / H1.w;

        vec2 P0 = (H0.xy * k0 * 0.5 + 0.5) * Global.framebuffer_size;
        vec2 P1 = (H1.xy * k1 * 0.5 + 0.5) * Global.framebuffer_size;

        #ifndef _ORIGIN_BOTTOM_LEFT
            P0.y = Global.framebuffer_size.y - P0.y;
            P1.y = Global.framebuffer_size.y - P1.y;
        #endif

        vec2 delta = P1 - P0;
        bool permute = abs(delta.x) < abs(delta.y);
        if (permute) {
            P0 = P0.yx;
            P1 = P1.yx;
            delta = delta.yx;
        }

        float stepDir = sign(delta.x);
        float invdx = stepDir / delta.x;

        float dk = ((k1 - k0) * invdx) * stride;
        vec2  dP = (vec2(stepDir, delta.y * invdx)) * stride;

        vec2 P = P0;
        float k = k0;
        
        uint max_steps = 64 >> 2;
        for (uint j = 0; j < 4; ++j) {
            P += dP * jitter / stride;
            k += dk * jitter / stride;
            for (uint i = 0; i < max_steps; ++i) {
                float rayZFar = 1 / k;

                vec2 p = permute ? P.yx : P;
                if (any(lessThan(p, vec2(0)))) break;
                if (any(greaterThan(p, vec2(Global.framebuffer_size)))) break;

                float depth = texture(u_depthbuffer, p / Global.framebuffer_size).x;
                depth = toLinearDepth(Global.inv_projection, depth);
                
                float dif = rayZFar - depth;
                if (dif > 1e-3) {
                    return p;
                }

                P += dP;
                k += dk;
            }
            dP *= 2;
            dk *= 2;
        }
        return vec2(-1);
    }

	vec3 getReflectionColor(vec3 view, vec3 normal, float dist, vec3 wpos)
	{
		#ifdef SSR
        	vec4 o = Global.view * vec4(wpos, 1);
        	vec3 d = mat3(Global.view) * reflect(-view, normal);
			vec2 hit = raycast(o.xyz, d, 4, random(wpos.xy + Global.time));
			if (hit.x >= 0) {
				return texture(u_bg, hit.xy / Global.framebuffer_size.xy).rgb;
			}
		#endif

		vec3 reflection = reflect(-view, normal);
		vec4 radiance_rgbm = textureLod(u_reflection_probes, vec4(reflection, 0), min(3, dist * 0.1));
		return radiance_rgbm.rgb * radiance_rgbm.a * 4;
	}

	float toLinearDepth(float ndc_depth) {
		vec4 pos_proj = vec4(0, 0, ndc_depth, 1.0);
	
		vec4 view_pos = Global.inv_projection * pos_proj;
	
		return -view_pos.z / view_pos.w;
	}

	float getWaterDepth(vec3 wpos, vec3 view, vec3 normal)
	{
		vec4 screen_pos = Global.view_projection * vec4(wpos, 1);
		screen_pos /= screen_pos.w;
		#ifndef _ORIGIN_BOTTOM_LEFT
			screen_pos.y *= -1;
		#endif
		float depth = texture(u_depthbuffer, screen_pos.xy * 0.5 + 0.5).x;
		return toLinearDepth(depth) - toLinearDepth(screen_pos.z);
	}
	
	vec4 getRefraction(vec3 wpos)
	{
		vec4 screen_pos = Global.view_projection * vec4(wpos, 1);
		screen_pos /= screen_pos.w;
		#ifndef _ORIGIN_BOTTOM_LEFT
			screen_pos.y *= -1;
		#endif
		return texture(u_bg, screen_pos.xy * 0.5 + 0.5);
	}
	
	// TODO try less texture fetches
	vec3 getSurfaceNormal(vec2 uv, float normal_strength)
	{
		float noise_t = texture(u_noise, 1 - uv * 0.1).x;
		vec2 tc0 = uv * u_uv_scale + u_flow_dir * Global.time;
		vec2 tc1 = uv * u_uv_scale + u_flow_dir * (Global.time + noise_t * 0.1);

		vec3 wnormal0;
		wnormal0.xz = (texture(u_normalmap, tc0).xy + texture(u_normalmap, tc1 * 2.7).xy) - 0.5;
		wnormal0.xz = wnormal0.xz * 2 - 1;
		vec3 wnormal1;
		wnormal1.xz = (texture(u_normalmap, vec2(0.5, 0.5) - tc1).xy + texture(u_normalmap, (vec2(0.5, 0.5) - tc1) * 2.3).xy) - 0.5;
		wnormal1.xz = wnormal1.xz * 2 - 1;
		
		wnormal0.y = sqrt(saturate(1 - dot(wnormal0.xz, wnormal0.xz))); 
		wnormal1.y = sqrt(saturate(1 - dot(wnormal1.xz, wnormal1.xz))); 

		float noise = texture(u_noise, uv * 0.05).x;
		float t = fract(Global.time + noise * 2);
		vec3 wnormal = mix(wnormal0, wnormal1, abs( 0.5 - t ) / 0.5);

		return normalize(mix(vec3(0, 1, 0), wnormal, normal_strength));
	}

	void main()
	{
		vec3 V = normalize(-v_wpos.xyz);
		vec3 L = Global.light_dir.xyz;
		
		float shadow = 1; //getShadow(u_shadowmap, data.wpos, data.N);
		
		/////////
		const float WAVE_HEIGHT = 0.0;
		const float WAVE_FREQUENCY = 3;

		const float FOAM_DEPTH = 0.2;
		const float FOAM_TEXTURE_SCALE = 5;
		const float FOAM_WIDTH = 1;
	
		mat3 tbn = mat3(
			normalize(v_tangent),
			normalize(v_normal),
			normalize(cross(v_normal, v_tangent))
			);

		float normal_strength = u_normal_strength;
		#ifdef _HAS_ATTR2 
			//normal_strength *= 1 - v_masks.g;
		#endif

		vec3 wnormal = getSurfaceNormal(v_uv, normal_strength);
		wnormal = normalize(tbn * wnormal);

		float dist = length(v_wpos.xyz);
		vec3 view = normalize(-v_wpos.xyz);
		vec3 refl_color = getReflectionColor(view, wnormal, dist * normal_strength, v_wpos.xyz) * u_reflection_multiplier;
		float water_depth = getWaterDepth(v_wpos.xyz, view, wnormal);

		vec3 halfvec = normalize(view + Global.light_dir.xyz);
		float spec_strength = pow(saturate(dot(halfvec, wnormal)), u_specular_power);
		
		vec3 R = reflect(-normalize(view), normalize(wnormal));
		spec_strength = pow(saturate(dot(R, normalize(Global.light_dir.xyz))), u_specular_power);

		vec3 spec_color = Global.light_color.rgb * spec_strength * u_specular_multiplier;
		float fresnel = u_r0 + (1.0 - u_r0) * pow(saturate(1.0 - dot(normalize(view), wnormal)), 5);

		vec3 water_color = pow(u_water_color.rgb, vec3(2.2)); // TODO do not do this in shader
		vec3 transmittance = saturate(exp(-water_depth * u_water_scattering * (vec3(1) - water_color)));

		float t = saturate(water_depth * 5); // no hard edge

		float refraction_distortion = u_refraction_distortion;

		vec3 refraction = getRefraction(v_wpos.xyz + vec3(wnormal.xz, 0) * u_refraction_distortion * t).rgb;
		refraction *= mix(vec3(1), u_ground_tint.rgb, t);
		refraction *= transmittance;

		vec3 reflection = refl_color + spec_color;

		o_color.rgb = mix(refraction, reflection, fresnel);
		o_color.rgb = mix(refraction, o_color.rgb, t);
		
		float noise = texture(u_noise, 1 - v_uv * 0.1 + u_flow_dir * Global.time * 0.3).x;
		#if defined HAS_FOAM && defined _HAS_ATTR2
			vec4 foam = texture(u_foam, v_uv + u_flow_dir * Global.time * 3);
			o_color.rgb = mix(o_color.rgb, foam.rgb, saturate(v_masks.r - noise) * t);
		#endif

		#if defined HAS_CLUTTER && defined _HAS_ATTR2
			vec4 clutter = texture(u_clutter, v_uv + wnormal.xz * 0.3 + vec2(noise * 0.03, 0));
			o_color.rgb = mix(o_color.rgb, clutter.rgb, saturate(clutter.a * v_masks.g * t));
		#endif

		o_color.a = 1;
	}
]]